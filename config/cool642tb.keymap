#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define JP_KANA LANGUAGE_1 // かな
#define JP_EISU LANGUAGE_2 // 英数
#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        comb1 {
            bindings = <&kp TAB>;
            key-positions = <10 0>;
        };

        comb2 {
            bindings = <&kp LS(ESCAPE)>;
            key-positions = <0 1>;
        };

        comb3 {
            bindings = <&kp CAPSLOCK>;
            key-positions = <11 10>;
        };

        comb4 {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
            slow-release;
        };

        comb5 {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <9 8>;
            timeout-ms = <0>;
            layers = <1>;
        };

        comb6_middleclick {
            bindings = <&mkp MCLK>;
            key-positions = <31 32>;
        };

        comb7minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        comb8_layer_arrow {
            bindings = <&mo 3>;
            key-positions = <21 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ret_kp: ret_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to 0 &macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER>;

            label = "RET_KP";
        };

        atmark: atmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_EISU &kp AT_SIGN>;
            label = "ATMARK";
        };

        JpBracket: JpBracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_KANA &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp ENTER &kp LEFT_ARROW>;
            label = "JPBRACKET";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替えてください

            tap-ms = <20>;
        };

        cmd_to_cmd: cmd_to_cmd {
            compatible = "zmk,behavior-tap-dance";
            label = "CMD_TO_CMD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND>, <&kp RIGHT_COMMAND>;
        };

        play_pause_n_p: play_pause_n_p {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_PAUSE_N_P";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W     &kp E        &kp R        &kp T                                   &kp Y      &kp U    &kp I      &kp O      &kp P
&mt LEFT_CONTROL A  &kp S     &kp D        &kp F        &kp G  &to 1  &kp C_VOLUME_UP           &kp H      &lt 5 J  &kp K      &kp L      &mo 2
&kp Z               &kp X     &kp C        &kp V        &kp B  &none  &mt K_MUTE C_VOLUME_DOWN  &kp N      &lt 3 M  &mkp LCLK  &mkp RCLK  &kp ENTER
&kp LEFT_SHIFT      &kp LALT  &cmd_to_cmd  &cmd_to_cmd  &mo 1  &mo 2  &kp BSPC                  &kp SPACE                                 &play_pause_n_p
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&none      &none           &kp UP_ARROW    &none            &none                                        &none            &none         &none                 &none                  &none
&kp LCTRL  &kp LEFT_ARROW  &kp HASH        &kp RIGHT_ARROW  &kp PERCENT   &to 2       &kp INT_MUHENKAN   &kp AMPERSAND    &kp SQT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ENTER
&kp PLUS   &kp MINUS       &kp DOWN_ARROW  &kp SLASH        &kp EQUAL     &JpBracket  &kp RIGHT_BRACKET  &kp TILDE        &kp QUESTION  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp QUESTION
&kp LSHFT  &kp LALT        &kp LGUI        &kp LGUI         &bt BT_SEL 2  &atmark     &kp LEFT_ARROW     &kp RIGHT_ARROW                                                             &kp LEFT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        NUM {
            bindings = <
&kp MINUS       &kp N9      &kp NUMBER_8  &kp N7        &kp BACKSPACE                      &none      &kp N7  &kp N8  &kp N9  &kp MINUS
&kp PLUS        &kp N6      &kp NUMBER_5  &kp N4        &kp SLASH      &none    &none      &none      &kp N4  &kp N5  &kp N6  &none
&kp EQUAL       &kp N3      &kp NUMBER_2  &kp N1        &kp ASTERISK   &kp RET  &kp COMMA  &kp N0     &kp N1  &kp N2  &kp N3  &kp PLUS
&kp LEFT_SHIFT  &kp PERIOD  &kp NUMBER_0  &kp NUMBER_0  &kp SPACE      &kp RET  &kp BSPC   &kp SPACE                          &kp DOT
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSEDETAIL {
            bindings = <
&none           &kp C_AC_HOME   &kp UP_ARROW    &kp PAGE_UP      &none                            &ret_kp Y        &none      &none      &none      &none
&kp RCTRL       &kp LEFT_ARROW  &none           &kp RIGHT_ARROW  &none  &none  &kp C_VOLUME_UP    &ret_kp H        &mo 5      &none      &none      &none
&none           &kp END         &kp DOWN_ARROW  &kp PAGE_DOWN    &none  &none  &kp C_VOLUME_DOWN  &ret_kp N        &ret_kp M  &mkp LCLK  &mkp RCLK  &kp RIGHT_SHIFT
&kp LEFT_SHIFT  &kp LALT        &kp LGUI        &kp LGUI         &none  &none  &kp LEFT_ARROW     &kp RIGHT_ARROW                                   &none
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&none               &none             &none             &none             &none                &ret_kp Y  &none      &none      &none      &none
&kp RCTRL           &none             &none             &none             &none  &none  &none  &ret_kp H  &mo 5      &none      &none      &none
&none               &none             &none             &none             &none  &none  &none  &ret_kp N  &ret_kp M  &mkp LCLK  &mkp RCLK  &kp RIGHT_SHIFT
&ret_kp LEFT_SHIFT  &ret_kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_COMMAND  &none  &none  &none  &none                                       &none
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL {
            bindings = <
&none      &kp C_AC_HOME  &kp UP         &kp PAGE_UP    &none                                       &none                  &none        &none               &none                &kp LG(W)
&kp RCTRL  &kp LEFT       &kp LA(LS(F))  &kp RIGHT      &none      &none      &kp C_VOLUME_UP       &none                  &none        &kp LEFT            &kp RIGHT            &none
&none      &kp END        &kp DOWN       &kp PAGE_DOWN  &none      &kp LG(X)  &kp C_VOLUME_DOWN     &kp LS(RC(TAB))        &kp RC(TAB)  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &none
&kp LSHFT  &kp LALT       &cmd_to_cmd    &cmd_to_cmd    &kp LG(V)  &kp LG(C)  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)                                                        &none
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };
    };
};
